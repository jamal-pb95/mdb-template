{"version":3,"sources":["components/QuoteGenerator.js","App.js","serviceWorker.js","index.js"],"names":["QuoteGenerator","_ref","selectedQuote","assignNewQuoteIndex","react_default","a","createElement","Card_default","CardContent_default","Typography_default","id","quote","author","CardActions_default","Button_default","variant","size","onClick","IconButton_default","color","target","href","concat","react_fontawesome_index_es","icon","faTwitter","App","state","quotes","selectedQuoteIndex","_this","length","random","setState","_this2","this","axios","get","then","res","data","catch","error","console","log","index_es","className","props","classes","container","justify","xs","lg","item","components_QuoteGenerator","Number","isInteger","Component","withStyles","alignItems","display","height","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wbAyCeA,EA9BQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,cAAeC,EAAlBF,EAAkBE,oBAAlB,OACrBC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAACE,EAAAH,EAAD,KACED,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAYK,GAAG,QACZR,EAAcS,MADjB,MAC0BP,EAAAC,EAAAC,cAAA,QAAMI,GAAG,UAAUR,EAAcU,UAG7DR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACED,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,QAAQ,YACRL,GAAG,YACHM,KAAK,QACLC,QAASd,GAJX,cAOAC,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACEc,MAAM,UACNT,GAAG,cACHU,OAAO,SACPC,KAAI,yCAAAC,OAA2CpB,EAAcS,MAAzD,OAAAW,OAAoEpB,EAAcU,OAAlF,uDAEJR,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,KAAMC,IACNT,KAAK,WCZTU,6MACJC,MAAQ,CACNC,OAAQ,GACRC,mBAAoB,QAoBtBA,mBAAqB,WACnB,GAAIC,EAAKH,MAAMC,OAAOG,OACtB,OAAOC,iBAAO,EAAGF,EAAKH,MAAMC,OAAOG,OAAS,MAI9C5B,oBAAsB,WACpB2B,EAAKG,SAAS,CACZJ,mBAAoBC,EAAKD,2GAxBT,IAAAK,EAAAC,KAClBC,IAAMC,IArBE,yIAsBLC,KAAK,SAACC,GAAD,OAASA,EAAIC,OAClBC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,KAC3BJ,KAAK,SAAAV,GAAM,OAAIM,EAAKD,SAAS,CAAEL,UAAUM,EAAK/B,wDAyBjD,OACEC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMC,UAAWX,KAAKY,MAAMC,QAAQC,UAAWvC,GAAG,YAAYwC,QAAQ,SAASD,WAAS,GACtF7C,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMM,GAAI,GAAIC,GAAI,EAAGjC,MAAM,UAAUkC,MAAI,GASrClB,KAAKjC,cACLE,EAAAC,EAAAC,cAACgD,EAAD,CACEpD,cAAeiC,KAAKjC,cACpBC,oBAAqBgC,KAAKhC,sBAC5B,6CAnCR,GAAIgC,KAAKR,MAAMC,OAAOG,QAAWwB,OAAOC,UAAUrB,KAAKR,MAAME,oBAG7D,OAAOM,KAAKR,MAAMC,OAAOO,KAAKR,MAAME,2BAnBtB4B,aA4DHC,uBAtEA,CACbT,UAAW,CACTU,WAAY,SACZC,QAAS,OACTC,OAAQ,UAkEGH,CAAmBhC,GCtEdoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.c6012bae.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from  '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\n\r\n\r\nconst QuoteGenerator = ({ selectedQuote, assignNewQuoteIndex }) => (\r\n  <Card>\r\n    <CardContent>\r\n      <Typography id=\"text\">\r\n        {selectedQuote.quote} - <span id=\"author\">{selectedQuote.author}</span>\r\n      </Typography>\r\n    </CardContent>\r\n    <CardActions>\r\n      <Button \r\n        variant=\"contained\"\r\n        id=\"new-quote\"\r\n        size=\"small\"\r\n        onClick={assignNewQuoteIndex}>Next Quote\r\n      </Button>\r\n      {/* tweet button */}\r\n      <IconButton\r\n        color=\"primary\"\r\n        id=\"tweet-quote\"\r\n        target=\"_blank\"\r\n        href={`https://twitter.com/intent/tweet?text=${selectedQuote.quote} - ${selectedQuote.author}&hashtags=JamalUddin, RandomThoughts, freeCodeCamp`}\r\n      >\r\n        <FontAwesomeIcon\r\n          icon={faTwitter}\r\n          size=\"lg\">\r\n        </FontAwesomeIcon>\r\n      </IconButton>\r\n    </CardActions>\r\n  </Card>\r\n);\r\n\r\nexport default QuoteGenerator;","import React, { Component } from 'react';\nimport { random } from 'lodash';\nimport axios from 'axios';\nimport './App.css'\nimport 'typeface-roboto';\nimport { Grid, withStyles } from '@material-ui/core';\nimport QuoteGenerator from './components/QuoteGenerator';\n\n// quote json file\nconst URL = 'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json';\n\n// main styles\nconst styles = {\n  container: {\n    alignItems: 'center',\n    display: 'flex',\n    height: '100vh'\n  }\n};\n\n\n// App begin\nclass App extends Component {\n  state = {\n    quotes: [],\n    selectedQuoteIndex: null\n  };\n\n  // fetch data from url json file\n  componentDidMount() {\n    axios.get(URL)\n      .then((res) => res.data)\n      .catch(error => console.log(error))\n      .then(quotes => this.setState({ quotes }, this.assignNewQuoteIndex));\n  }\n\n  // check the index of quote array\n  get selectedQuote() {\n    if(!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)) {\n      return undefined;\n    }\n    return this.state.quotes[this.state.selectedQuoteIndex];\n  }\n\n  // select random index\n  selectedQuoteIndex = () => {\n    if(!this.state.quotes.length) return undefined;\n    return random(0, this.state.quotes.length - 1);\n  }\n\n  // assign random index\n  assignNewQuoteIndex = () => {\n    this.setState({\n      selectedQuoteIndex: this.selectedQuoteIndex()\n    })\n  }\n\n  render() {\n    return (\n      <Grid className={this.props.classes.container} id=\"quote-box\" justify=\"center\" container>\n        <Grid xs={10} lg={8} color=\"primary\" item>\n          {\n            /*\n            * first check if selectedQuote exist of not?\n            * if have then show the quote and the author\n            * otherwise show null \n            */\n          }\n          {\n            this.selectedQuote ?\n            <QuoteGenerator \n              selectedQuote={this.selectedQuote}\n              assignNewQuoteIndex={this.assignNewQuoteIndex} /> :\n            null\n          }\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\n// Pass the App with styles\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}